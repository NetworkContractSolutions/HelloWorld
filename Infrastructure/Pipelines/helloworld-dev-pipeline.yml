parameters:
- name: teardown
  displayName: Teardown Environment
  type: boolean
  default: true

trigger: 
  paths:
    include:
    - 'Infrastructure/Pipelines/*'
    - 'HelloWorld/*'

variables:
  ContainerRegistryRepository: 'helloworld'
  Region: 'eastus2'
  ContainerAppName: 'helloworld-dev-container-app-$(Build.BuildId)'
  ResourceGroup: 'helloworld-dev-resource-group-$(Build.BuildId)'
  #Variables that are defined in the pipeline
  #ContainerRegistrySC: <Service Connection for the Container Registry>
  #AzureResourceManagerSC: <Name of the Azure Resource Manager service connection>
  #LogAnalyticsWorkspace
  #LogAnalyticsResourceGroup: <Log analytics isn't created here and we can't assume that the container app and log analytics will be in the same resource group>
  #ContainerRegistryLoginServer
  #ContainerRegistryUsername
  #ContainerRegistryPassword
  #ContainerAppEnvironment: <The id of the container app environment (az containerapp env list)>
  #ApiIdentity: <Space-separated user identities to be assigned.>

stages:
- stage: Build
  displayName: Build stage
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: Package
    displayName: Package job
    steps:
    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        containerRegistry: '$(ContainerRegistrySC)'
        repository: '$(ContainerRegistryRepository)'
        tags: $(Build.BuildId)
        Dockerfile: '**/HelloWorld/Dockerfile'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: '$(AzureResourceManagerSC)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: | 
                az group create -l $(Region) -n $(ResourceGroup)

          - task: AzureCLI@2
            displayName: 'Container App - Init Extension'
            inputs:
              azureSubscription: '$(AzureResourceManagerSC)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: | 
                az extension add --name containerapp
                az provider register --namespace Microsoft.App

          - task: AzureCLI@2
            displayName: 'Container App - Create'
            inputs:
              azureSubscription: '$(AzureResourceManagerSC)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: | 
                az containerapp create `
                  --name $(ContainerAppName) `
                  --resource-group $(ResourceGroup) `
                  --environment $(ContainerAppEnvironment) `
                  --image $(ContainerRegistryLoginServer)/$(ContainerRegistryRepository):$(Build.BuildId) `
                  --target-port 80 `
                  --ingress 'external' `
                  --registry-server $(ContainerRegistryLoginServer) `
                  --registry-username $(ContainerRegistryUsername) `
                  --registry-password $(ContainerRegistryPassword) `
                  --user-assigned $(ApiIdentity) `
                  --env-vars ASPNETCORE_ENVIRONMENT=Test 

          - task: AzureCLI@2
            displayName: 'Get CA URL'
            name: retrieveurl
            inputs:
              azureSubscription: '$(AzureResourceManagerSC)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: | 
                $aca = az containerapp list -g $(ResourceGroup) | ConvertFrom-Json | Where-Object {$_.name -eq "$(ContainerAppName)"} | Select-Object -First 1

                $url = "https://" + $aca.properties.configuration.ingress.fqdn 
                Write-Host "##vso[task.setvariable variable=ContainerAppUrl;isOutput=true]$url"
      
- stage: Test
  displayName: Test stage
  dependsOn: Deploy
  pool:
    vmImage: 'windows-2022'
  jobs:
  - job: RunTests
    displayName: Run Tests
    variables:
      HomePageUrl: $[ stageDependencies.Deploy.Deploy.outputs['Deploy.retrieveurl.ContainerAppUrl'] ]
    steps:
    - script: dotnet build --configuration Debug
      displayName: 'Build .NET 6 Application'

    - task: VSTest@2
      displayName: 'HelloWorld UI Tests'
      inputs:
        testAssemblyVer2: |
          **/*.IntegrationTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
          !**\bin\**\ref\**
        uiTests: true
        searchFolder: '$(System.DefaultWorkingDirectory)'
        failOnMinTestsNotRun: true
        minimumExpectedTests: '1'

- stage: Teardown
  displayName: Teardown stage
  dependsOn: Test
  condition: eq('${{ parameters.teardown }}', true)
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: Teardown
    displayName: Teardown job
    steps:
    - checkout: none
    - task: AzureCLI@2
      displayName: 'Delete Resource Group'
      inputs:
        azureSubscription: '$(AzureResourceManagerSC)'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: | 
          az group delete -n $(ResourceGroup) --yes --no-wait
